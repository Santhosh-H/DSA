You are given an m x n integer matrix mat and an integer k. The matrix rows are 0-indexed.

The following proccess happens k times:

Even-indexed rows (0, 2, 4, ...) are cyclically shifted to the left.


Odd-indexed rows (1, 3, 5, ...) are cyclically shifted to the right.


Return true if the final modified matrix after k steps is identical to the original matrix, and false otherwise.

 

Example 1:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 4

Output: false

Explanation:

In each step left shift is applied to rows 0 and 2 (even indices), and right shift to row 1 (odd index).



Example 2:

Input: mat = [[1,2,1,2],[5,5,5,5],[6,3,6,3]], k = 2

Output: true

Explanation:



Example 3:

Input: mat = [[2,2],[2,2]], k = 3

Output: true

Explanation:

As all the values are equal in the matrix, even after performing cyclic shifts the matrix will remain the same.

 

Constraints:

1 <= mat.length <= 25
1 <= mat[i].length <= 25
1 <= mat[i][j] <= 25
1 <= k <= 50


source code:: 

class Solution {
    private static void leftShift(int[] row, int k) {
        int n = row.length;
        k = k % n;
        reverse(row, 0, n - 1);
        reverse(row, 0, n - k - 1);
        reverse(row, n - k, n - 1);
    }

    private static void rightShift(int[] row, int k) {
        int n = row.length;
        k = k % n;
        reverse(row, 0, n - 1);
        reverse(row, 0, k - 1);
        reverse(row, k, n - 1);
    }

    private static void reverse(int[] row, int start, int end) {
        while (start < end) {
            int temp = row[start];
            row[start] = row[end];
            row[end] = temp;
            start++;
            end--;
        }
    }

    public boolean areSimilar(int[][] mat, int k) {
        int m = mat.length;
        int n = mat[0].length;

        // Create a copy of the original matrix
        int[][] modifiedMat = new int[m][n];
        for (int i = 0; i < m; i++) {
            modifiedMat[i] = mat[i].clone();
        }

        // Perform the cyclic shifts
        for (int i = 0; i < m; i++) {
            if (i % 2 == 0) { // Even-indexed rows
                leftShift(modifiedMat[i], k);
            } else { // Odd-indexed rows
                rightShift(modifiedMat[i], k);
            }
        }

        // Compare the modified matrix with the original matrix
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (mat[i][j] != modifiedMat[i][j]) {
                    return false;
                }
            }
        }
        return true;

    }
}


















