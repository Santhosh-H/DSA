java -cp /tmp/y6tX7sRTyi/EvaluateExpression
Result of 13+4*2 is: 21
Result of 5/2 is: 2
Result of 100/(8+12)*5 is: 25

=== Code Execution Successful ===


import java.util.*;

public class EvaluateExpression {

    public static void main(String[] args) {
        String expression1 = "13+4*2";
        String expression2 = "5/2";
        String expression3 = "100/(8+12)*5";

        System.out.println("Result of " + expression1 + " is: " + evaluate(expression1));
        System.out.println("Result of " + expression2 + " is: " + evaluate(expression2));
        System.out.println("Result of " + expression3 + " is: " + evaluate(expression3));
    }

    public static int evaluate(String expression) {
        Stack<Integer> values = new Stack<>();
        Stack<Character> operators = new Stack<>();

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            // Skip whitespaces
            if (ch == ' ') {
                continue;
            }

            // Current token is a number, push it to stack for numbers
            if (Character.isDigit(ch)) {
                int num = 0;
                while (i < expression.length() && Character.isDigit(expression.charAt(i))) {
                    num = num * 10 + (expression.charAt(i) - '0');
                    i++;
                }
                i--;
                values.push(num);
            }
            // Current token is an opening brace, push it to 'ops'
            else if (ch == '(') {
                operators.push(ch);
            }
            // Closing brace encountered, solve entire brace
            else if (ch == ')') {
                while (operators.peek() != '(') {
                    values.push(applyOperator(operators.pop(), values.pop(), values.pop()));
                }
                operators.pop();
            }
            // Current token is an operator.
            else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
                while (!operators.isEmpty() && hasPrecedence(ch, operators.peek())) {
                    values.push(applyOperator(operators.pop(), values.pop(), values.pop()));
                }
                operators.push(ch);
            }
        }

        // Entire expression has been parsed at this point, apply remaining ops to remaining values
        while (!operators.isEmpty()) {
            values.push(applyOperator(operators.pop(), values.pop(), values.pop()));
        }

        return values.pop();
    }

    public static boolean hasPrecedence(char op1, char op2) {
        if (op2 == '(' || op2 == ')') {
            return false;
        }
        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) {
            return false;
        }
        return true;
    }

    public static int applyOperator(char op, int b, int a) {
        switch (op) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            case '/':
                if (b == 0) {
                    throw new UnsupportedOperationException("Cannot divide by zero");
                }
                return a / b;
        }
        return 0;
    }
}
